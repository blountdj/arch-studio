import { CONFIG as e } from "https://cdn.jsdelivr.net/gh/blountdj/arch-studio@v13/min/js/config.min.js"; let { homeInit: t } = await import(`${e.path}${e.folder}js/home${e.jsEnd}.js`), { aboutInit: a } = await import(`${e.path}${e.folder}js/about${e.jsEnd}.js`), { contactFormInit: n } = await import(`${e.path}${e.folder}js/contact${e.jsEnd}.js`), { homeAnimationInit: o, homeAnimationEnter: i } = await import(`${e.path}${e.folder}js/homeAnimations${e.jsEnd}.js`), { initPortfolio: r, animatePortfolioEnter: s } = await import(`${e.path}${e.folder}js/portfolio${e.jsEnd}.js`), { aboutAnimationInit: c, aboutAnimationEnter: p } = await import(`${e.path}${e.folder}js/aboutAnimations${e.jsEnd}.js`), { contactAnimationInit: d, contactAnimationEnter: m } = await import(`${e.path}${e.folder}js/contactAnimations${e.jsEnd}.js`), { textSplit: l, disableScroll: x, enableScroll: f, addFilesCssToBody: u, removeCssFilesFromBody: w } = await import(`${e.path}${e.folder}js/utilities${e.jsEnd}.js`), { imgTransitionAnimation: h, introElementsReset: j } = await import(`${e.path}${e.folder}js/animations${e.jsEnd}.js`), portfolioCssFileUrl = `${e.path}${e.folder}css/portfolio${e.cssEnd}.css`, pageIdentifierTextEnter = async e => (l(e.next.container.querySelector(".page_identifer_text")), new Promise(e => { gsap.set(".page_identifer_text", { opacity: 1 }), gsap.set(".page_identifer_text > .word >.char", { opacity: 0 }), gsap.to(".page_identifer_text > .word > .char", { opacity: 1, duration: 1.575, stagger: { from: "random", each: .075 }, ease: "power2.out", onComplete() { e() } }) })), pageIdentifierTextLeave = e => { let t = document.querySelector(".page_identifer_text"); return new Promise(a => { gsap.to(".char", { opacity: 0, duration: 1.575, stagger: { from: "random", each: .075 }, ease: "power2.out", onComplete() { a(), t.textContent = e.next.namespace } }) }) }, animationFadeInEnter = e => { gsap.to(".barba_main_wrap", { duration: 2, autoAlpha: 1, ease: "power4.out", async onStart() { e && await pageIdentifierTextEnter(e) } }) }, animationFadeOutLeave = e => new Promise(t => { gsap.to(".barba_main_wrap", { duration: 1.5, autoAlpha: 0, ease: "power4.out", async onStart() { await pageIdentifierTextLeave(e) }, onComplete: t }) }), introAnimation = async e => new Promise(async t => { await h(e); let a = document.querySelector(".page_identifer_text"); l(a), gsap.set(".page_identifer_text > .word > .char", { color: "white" }), gsap.to(".page_identifer_text > .word > .char", { opacity: 1, duration: 2.575, color: "#c8ccd8", stagger: { from: "random", each: .075 }, ease: "power2.out", onStart() { gsap.set(a, { opacity: 1 }, animationFadeInEnter(null)) } }), setTimeout(() => { f(), t() }, 100) }); barba.hooks.beforeEnter(e => { setTimeout(() => { window.scrollTo(0, 0), x(), gsap.set(".page_identifer_text > .word > .char", { color: "white" }) }, 100); let t = e.next.namespace; "portfolio" === t ? u([portfolioCssFileUrl]) : w([portfolioCssFileUrl]); let a = document.querySelector("#w-nav-overlay-0"); a.style.display = "none", "home" === e.next.namespace ? o(e.next.container) : "portfolio" === e.next.namespace ? r(e.next.container) : "about us" === e.next.namespace ? c(e.next.container) : "contact" === e.next.namespace && d(e.next.container) }), barba.hooks.once(async e => { await introAnimation(e), "home" === e.next.namespace ? (t(e.next.container), i(e.next.container)) : "portfolio" === e.next.namespace ? s(e.next.container) : "about us" === e.next.namespace ? p(e.next.container) : "contact" === e.next.namespace && m(e.next.container) }), barba.hooks.afterEnter(e => { let t = e.next.namespace; "about us" === t ? a() : "contact" === t && n(e.next.container) }), barba.init({ debug: e.barbaDebug, sync: !1, views: [], transitions: [{ name: "page-fade-transition", once() { }, async leave(e) { animationFadeOutLeave(e), await j() }, async enter(e) { introAnimation(e), await animationFadeInEnter(e), "home" === e.next.namespace ? (t(e.next.container), setTimeout(() => { i(e.next.container) }, 3e3)) : "portfolio" === e.next.namespace ? setTimeout(() => { s(e.next.container) }, 3250) : "about us" === e.next.namespace ? setTimeout(() => { p(e.next.container) }, 3250) : "contact" === e.next.namespace && setTimeout(() => { m(e.next.container) }, 3250) } },] });